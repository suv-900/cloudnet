trigger:
  branches:
    include:
    - 'main'
  paths:
    include:
    - app

pool: Default
variables:
  dev_rg_name: 'dev-suvham-rg'
  dev_kv_name: 'dev-suvham-kv'
  dev_k8s_cluster_name: 'dev-suvham-aks'
  dev_image_name: 'dev-suvham-image'
  dev_acr_name: 'devsuvhamacr'
  k8s_namespace: 'default'
  

stages:
- stage: DevBuildApp
  displayName: 'Dev Build App'
  jobs:
  - job:
    steps:
    - task: NodeTool@0
      inputs:
        versionSource: 'spec'
        versionSpec: '16.x'
      displayName: 'Install Nodejs'
    
    - script: |
        cd app
        npm install
        npm run build --if-present
        npm run test --if-present
      displayName: 'Npm install'
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/app/'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true
    
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: DevAppDeploy
  displayName: 'Dev Deploy'
  dependsOn: DevBuildApp
  jobs:
  
  - deployment:
    displayName: 'Dev WebApp Deploy'
    environment: dev
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@5
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'suvham_paul@epam.com(a53670da-bf9b-4c7d-825a-7544c720e890)'
              appType: 'webAppLinux'
              WebAppName: 'dev-suvham-webapp'
              packageForLinux: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              RuntimeStack: 'NODE|16-lts'
              StartupCommand: 'node app.js'
              DeploymentTypeLinux: 'oneDeploy'


- stage: DevBuildImage
  dependsOn: DevAppDeploy
  jobs:
  - job:
    pool:
      name: Default
      demands: Agent.Name -equals ubuntu
    steps:
    - task: DockerInstaller@0
      inputs:
        dockerVersion: '17.09.0-ce'
    
    - task: Docker@2
      inputs:
        containerRegistry: 'devacrcon'
        repository: $(dev_image_name)
        command: 'buildAndPush'
        Dockerfile: 'app/Dockerfile'
        buildContext: 'app/'
        tags: $(Build.BuildId)
    


- stage: DevImageDeploy
  displayName: 'Dev Image Deploy'
  dependsOn: DevBuildImage
  jobs:
  - job:
    pool:
      name: Default
      demands: Agent.Name -equals ubuntu
    steps:
      - task: KubectlInstaller@0
        inputs:
          kubectlVersion: 'latest'
      - task: AzureKeyVault@2
        inputs:
          azureSubscription: 'suvham_paul@epam.com(a53670da-bf9b-4c7d-825a-7544c720e890)'
          KeyVaultName: $(dev_kv_name)
          SecretsFilter: 'dev-sql-user,dev-sql-password,dev-sql-database-name,dev-sql-server-fqdn'
          RunAsPreJob: false

      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            export IMAGE_NAME=$(dev_acr_name).azurecr.io/$(dev_image_name):$(Build.BuildId)
            cat manifests/deployment.yml | envsubst
      
      - task: KubernetesManifest@1
        displayName: 'Dev Deploy AKS'
        inputs:
          action: 'deploy'
          connectionType: 'kubernetesServiceConnection'
          kubernetesServiceConnection: 'dev-aks-con'
          namespace: '$(k8s_namespace)'
          manifests: |
            manifests/deployment.yml
            manifests/service.yml
          containers: '$(dev_acr_name).azurecr.io/$(dev_image_name):$(Build.BuildId)'
          azureResourceGroup: $(dev_rg_name)
          secretType: 'generic'
          secretName: 'dbcred'
          secretArguments: |
            --from-literal=sql-user=$(dev-sql-user)
            --from-literal=sql-password=$(dev-sql-password)
            --from-literal=sql-database=$(dev-sql-database-name) 
            --from-literal=sql-server=$(dev-sql-server-fqdn)

      