trigger:
  branches:
    include:
    - 'main'
  paths:
    include:
    - app

pool: Default

stages:
- stage: DevBuildApp
  displayName: 'Dev Build App'
  jobs:
  - job:
    steps:
    - task: NodeTool@0
      inputs:
        versionSource: 'spec'
        versionSpec: '16.x'
      displayName: 'Install Nodejs'
    
    - script: |
        cd application
        npm install
        npm run build --if-present
        npm run test --if-present
      displayName: 'Npm install'
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/application/'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true
    
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop
    

- stage: DevBuildImage
  jobs:
  - job:
    pool:
      name: Default
      demands: Agent.Name -equals ubuntu
    steps:
    - task: DockerInstaller@0
      inputs:
        dockerVersion: '17.09.0-ce'
    
    - task: Docker@2
      inputs:
        containerRegistry: 'devacrcon'
        repository: 'dev-suvham-image'
        command: 'buildAndPush'
        Dockerfile: 'app/Dockerfile'
        buildContext: 'app/'
    

- stage: DevAppDeploy
  displayName: 'Dev Deploy'
  dependsOn: DevBuildApp
  jobs:
  
  - deployment:
    displayName: 'Dev WebApp Deploy'
    environment: dev
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@5
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'suvham_paul@epam.com(a53670da-bf9b-4c7d-825a-7544c720e890)'
              appType: 'webAppLinux'
              WebAppName: 'dev-suvham-webapp1'
              packageForLinux: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              RuntimeStack: 'NODE|16-lts'
              StartupCommand: 'node app.js'
              DeploymentTypeLinux: 'oneDeploy'

- stage: DevImageDeploy
  displayName: 'Dev Image Deploy'
  dependsOn: DevBuildImage
  jobs:
  - job:
    steps:
      - task: KubectlInstaller@0
        inputs:
          kubectlVersion: 'latest'
      - task: AzureKeyVault@2
        inputs:
          azureSubscription: 'suvham_paul@epam.com(a53670da-bf9b-4c7d-825a-7544c720e890)'
          KeyVaultName: 'dev-suvham-kv'
          SecretsFilter: 'dev-sql-user,dev-sql-password,dev-sql-database,dev-sql-server-fqdn'
          RunAsPreJob: false

      - task: Kubernetes@1
        inputs:
          connectionType: 'Azure Resource Manager'
          azureSubscriptionEndpoint: 'suvham_paul@epam.com(a53670da-bf9b-4c7d-825a-7544c720e890)'
          azureResourceGroup: 'dev-suvham-rg'
          kubernetesCluster: 'dev-suvham-aks'
          command: 'create'
          secretType: 'generic'
          secretArguments: |
            --from-literal=sql_user=${dev-sql-user}
            --from-literal=sql_password=${dev-sql-password}
            --from-literal=sql_database=${dev-sql-database}
            --from-literal=sql_server=${dev-sql-server-fqdn}
          secretName: 'db_cred'

      - task: CmdLine@2
        inputs:
          script: |
            export ACR_LOGIN_SERVER=devsuvhamacr.azurecr.io
            export IMAGE_NAME=dev-suvham-image

      - task: CmdLine@2
        inputs:
          script: 'cat app/deployment.yml | envsubst | kubectl apply'